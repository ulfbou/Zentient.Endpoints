name: Simplified CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_test:
    name: Build and Test .NET Application
    runs-on: ubuntu-latest

    env:
      SOLUTION_FILE_NAME: Zentient.Endpoints.sln
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_CLI_UI_LANGUAGE: en
      NUGET_XMLDOC_MODE: skip

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4
        with:
          # These were commented out in your original, but are crucial if your solution
          # has project references that depend on submodules or a full history.
          # The errors indicate that project files are missing, which can happen if
          # the directory structure isn't fully pulled, or if submodules aren't initialized.
          fetch-depth: 0
          submodules: recursive

      - name: üìÅ Define Paths for Debugging
        run: |
          echo "REPO_ROOT=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "MAIN_SOLUTION_PATH=$GITHUB_WORKSPACE/$SOLUTION_FILE_NAME" >> $GITHUB_ENV
          # Assuming 'Src' and 'Tests' directories are at the root level alongside the .sln file
          # If they are inside another folder (e.g., 'YourRepoRoot/Src'), adjust this path
          echo "SRC_DIR=$GITHUB_WORKSPACE/Src" >> $GITHUB_ENV
          echo "TESTS_DIR=$GITHUB_WORKSPACE/Tests" >> $GITHUB_ENV
          echo "--- Current Working Directory ---"
          pwd
          echo "--- Content of GITHUB_WORKSPACE ---"
          ls -F $GITHUB_WORKSPACE
          echo "--- Content of SRC_DIR (if it exists) ---"
          ls -F "${SRC_DIR}" || echo "SRC_DIR does not exist or is empty."
          echo "--- Content of TESTS_DIR (if it exists) ---"
          ls -F "${TESTS_DIR}" || echo "TESTS_DIR does not exist or is empty."

      - name: üß™ Validate Structure for Debugging
        run: |
          echo "üóÇ Validating paths..."
          # This step will explicitly check if the solution file and expected directories exist.
          # If they don't, it will output a clear error message and fail the workflow.
          test -f "$MAIN_SOLUTION_PATH" || (echo "‚ùå Missing solution file: $MAIN_SOLUTION_PATH" && exit 1)
          test -d "$SRC_DIR" || echo "‚ö†Ô∏è Missing source dir: $SRC_DIR - This might be the cause of project file errors!"
          test -d "$TESTS_DIR" || echo "‚ö†Ô∏è Missing test dir: $TESTS_DIR - This might be the cause of project file errors!"
          echo "Validation complete."

      - name: ‚öôÔ∏è Setup .NET SDK (8.0.x)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üì¶ Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: üîß Restore Dependencies
        # Using the defined SOLUTION_FILE_NAME variable for consistency
        run: dotnet restore ${{ env.SOLUTION_FILE_NAME }}

      - name: üîß Build Solution
        run: dotnet build ${{ env.SOLUTION_FILE_NAME }} --no-restore --configuration Release

      - name: üß™ Run Tests
        run: dotnet test ${{ env.SOLUTION_FILE_NAME }} --no-build --configuration Release
