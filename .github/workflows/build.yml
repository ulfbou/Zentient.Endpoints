name: .NET Build with Debug Logging

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive # Keep this, essential if 'Results' or other dependencies are submodules
        fetch-depth: 0

    - name: Set working directory
      # REPO_ROOT should point to the base directory of your primary repository
      # Based on ls output, GITHUB_WORKSPACE seems to be the correct location for Zentient.Endpoints.sln and its direct children (Src, Tests, etc.)
      run: echo "REPO_ROOT=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    - name: Print current directory and REPO_ROOT
      run: |
        pwd
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "REPO_ROOT: $REPO_ROOT" # This should now be identical to GITHUB_WORKSPACE

    - name: List contents of GITHUB_WORKSPACE (full recursive list)
      run: |
        echo "--- Listing contents of GITHUB_WORKSPACE (full recursive list) ---"
        ls -Rlah "$GITHUB_WORKSPACE" # Use -Rlah for detailed recursive listing
        echo "------------------------------------------------------------------"

    - name: Print important GitHub Actions environment variables
      run: |
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "GITHUB_REF: $GITHUB_REF"
        echo "GITHUB_SHA: $GITHUB_SHA"
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "GITHUB_ACTOR: $GITHUB_ACTOR"
        echo "RUNNER_OS: $RUNNER_OS"
        env # Print all environment variables

    - name: Find all .csproj files (verify expected paths)
      run: find "$REPO_ROOT" -name "*.csproj"

    - name: Print contents of solution file for path verification
      run: |
        SOLUTION_FILE_NAME="Zentient.Endpoints.sln"
        SOLUTION_PATH="$REPO_ROOT/$SOLUTION_FILE_NAME"
        if [ -f "$SOLUTION_PATH" ]; then
          echo "Solution file found at $SOLUTION_PATH. Contents:"
          cat "$SOLUTION_PATH" | grep 'Project(' # Only show lines with Project definitions
        else
          echo "##[error]No solution file found at $SOLUTION_PATH!"
          exit 1
        fi

    - name: Enable detailed dotnet CLI debug output
      run: |
        echo "Setting .NET CLI environment variables for detailed logging."
        echo "DOTNET_CLI_TELEMETRY_OPTOUT=1" >> $GITHUB_ENV
        echo "DOTNET_CLI_UI_LANGUAGE=en" >> $GITHUB_ENV
        echo "NUGET_XMLDOC_MODE=skip" >> $GITHUB_ENV

    - name: Run dotnet --info
      run: dotnet --info

    - name: Restore dependencies
      # Now, try restoring from the REPO_ROOT directly.
      # The problem is likely in how the .sln file references projects.
      run: dotnet restore "$REPO_ROOT/Zentient.Endpoints.sln" --verbosity diagnostic

    - name: Build
      run: dotnet build "$REPO_ROOT/Zentient.Endpoints.sln" --no-restore --verbosity diagnostic

    - name: Test
      run: dotnet test "$REPO_ROOT/Zentient.Endpoints.sln" --no-build --verbosity normal
